% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model.R
\name{CmdStanModel}
\alias{CmdStanModel}
\title{CmdStanModel objects}
\description{
A \code{CmdStanModel} object is an \link[R6:R6]{R6} object created by the
\code{\link[=cmdstan_model]{cmdstan_model()}} function. The object stores the path to a Stan program
and compiled executable (once created), and provides methods for fitting
the model using Stan's algorithms. See the \strong{Details} section for
available methods.
}
\details{
\code{CmdStanModel} objects have the following associated methods:

\tabular{ll}{
\strong{Method} \tab \strong{Description} \cr
\verb{$code()} \tab Return Stan program as a string. \cr
\verb{$print()} \tab Print readable version of Stan program. \cr
\verb{$stan_file()} \tab Return the file path to the Stan program. \cr
\verb{$exe_file()} \tab Return the file path to the compiled executable. \cr
\verb{$model_name()} \tab Return the model name. \cr
\code{\link[=model-method-compile]{$compile()}} \tab Compile Stan program. \cr
\code{\link[=model-method-sample]{$sample()}}
\tab Run CmdStan's \code{"sample"} method, return \code{\link{CmdStanMCMC}} object. \cr
\code{\link[=model-method-optimize]{$optimize()}}
\tab Run CmdStan's \code{"optimize"} method, return \code{\link{CmdStanMLE}} object. \cr
\code{\link[=model-method-variational]{$variational()}}
\tab Run CmdStan's \code{"variational"} method, return \code{\link{CmdStanVB}} object. \cr
}
}
\examples{
\dontrun{
# Set path to cmdstan
# (Note: if you installed CmdStan via install_cmdstan() with default settings
# then setting the path is unnecessary but the default below should still work.
# Otherwise use the `path` argument to specify the location of your
# CmdStan installation.)

set_cmdstan_path(path = NULL)

# Create a CmdStanModel object from a Stan program,
# here using the example model that comes with CmdStan
stan_program <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.stan")
mod <- cmdstan_model(stan_program)
mod$print()

# data as a named list (like RStan)
stan_data <- list(N = 10, y = c(0,1,0,0,0,0,0,0,0,1))

# run MCMC using the 'sample' method
fit_mcmc <- mod$sample(
  data = stan_data,
  seed = 123,
  num_chains = 2,
  num_cores = 2
)

# Use 'posterior' package for summaries
fit_mcmc$summary()

# Call CmdStan's diagnose and stansummary utilities
fit_mcmc$cmdstan_diagnose()
fit_mcmc$cmdstan_summary()

# For models fit using MCMC, if you like working with RStan's stanfit objects
# then you can create one with rstan::read_stan_csv()
if (require(rstan, quietly = TRUE)) {
  stanfit <- rstan::read_stan_csv(fit_mcmc$output_files())
  print(stanfit)
}

# Run 'optimize' method to get a point estimate (default is Stan's LBFGS algorithm)
# and also demonstrate specifying data as a path to a file instead of a list
my_data_file <- file.path(cmdstan_path(), "examples/bernoulli/bernoulli.data.json")
fit_optim <- mod$optimize(data = my_data_file, seed = 123)
fit_optim$summary()

# Run 'variational' to approximate the posterior (default is meanfield ADVI)
fit_vb <- mod$variational(data = stan_data, seed = 123)
fit_vb$summary()
}

}
\seealso{
The CmdStanR website (\href{https://mc-stan.org/cmdstanr/}{mc-stan.org/cmdstanr})
for online documentation and tutorials.

The Stan and CmdStan documentation:
\itemize{
\item Stan doc (html or pdf): \href{https://mc-stan.org/users/documentation/}{mc-stan.org/users/documentation/}
\item CmdStan doc (pdf): (\href{https://github.com/stan-dev/cmdstan/releases/latest}{github.com/stan-dev/cmdstan/releases/}).
}
}
